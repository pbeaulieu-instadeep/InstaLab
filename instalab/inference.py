"""This module provides a function to query a Gemini generative model.

It handles API key configuration, model initialization, content generation,
and includes retry logic for handling transient errors during API calls.
"""

from __future__ import annotations

import time

import google.generativeai as genai


def query_model(
    prompt: str,
    system_prompt: str,
    gemini_api_key: str = "XXX",
    tries: int = 5,
    timeout: float = 5.0,
) -> str | None:
    """Queries the Gemini generative model with a given prompt and system prompt.

    This function sends a prompt to the specified Gemini model and attempts
    to retrieve a textual response. It includes a retry mechanism to handle
    potential transient issues when communicating with the API.

    Args:
        prompt: The user's prompt to send to the model.
        system_prompt: The system instruction to guide the model's behavior.
        gemini_api_key: The API key for accessing the Gemini API.
                          Defaults to a placeholder key.
        tries: The maximum number of times to retry the API call in case of failure.
               Defaults to 5.
        timeout: The time in seconds to wait between retries.
                 Defaults to 5.0.

    Returns:
        The text response generated by the model.

    Raises:
        Exception: If the maximum number of retries is reached without a
                   successful response.
    """
    for i in range(tries):
        try:
            genai.configure(api_key=gemini_api_key)
            # Note: Model name "gemini-2.5-pro-preview-03-25" might be specific
            # and could be parameterized or updated as needed.
            model = genai.GenerativeModel(
                model_name="gemini-1.5-pro-latest",  # Using a more general latest model
                system_instruction=system_prompt,
            )
            response = model.generate_content(prompt)
            return response.text

        except Exception as e:
            print(f"Inference Exception (Attempt {i + 1}/{tries}):", e)
            if i < tries - 1:  # Don't sleep after the last try
                time.sleep(timeout)
                continue
            raise Exception(f"Max retries ({tries}) reached.") from e

    return None
